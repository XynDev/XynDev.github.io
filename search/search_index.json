{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-xyn-softworks-api","title":"Welcome to Xyn Softworks API","text":""},{"location":"#all-code-here-is-open-sourced-and-properly-documented","title":"All code here is open sourced and properly documented","text":"<p>All code should be functional, but make sure to report any errors. Our team [Xyn], will look at the bug reports as fast as possible, but remember, there may be some delay.</p>"},{"location":"#get-started","title":"Get Started","text":"<p>Click here to get started</p> <p>Danger</p> <p>If you encounter bugs, go to Report an issue</p>"},{"location":"APIs/coroutine/","title":"Easy Coroutine","text":""},{"location":"APIs/coroutine/#get-started-with-coroutines","title":"Get started with Coroutines","text":"<p>EasyCoroutine lets you resume, stop and disconnect Coroutines easily. I see a lot of people who have problems when resuming or disconnecting them, which is why EasyCoroutine was made.</p> <p>Create a server script, and add this line to the code:</p> <pre><code>local EasyCoroutine = HyLib.EasyCoroutine\nlocal PlayerCoroutine = EasyCoroutine.New()\n</code></pre>"},{"location":"APIs/coroutine/#methods","title":"Methods","text":""},{"location":"APIs/coroutine/#run","title":"Run","text":"<p><pre><code>PlayerCoroutine:Run(callback)\n</code></pre> Loops the callback until Stop or Disconnect is called.</p>"},{"location":"APIs/coroutine/#resume","title":"Resume","text":"<p><pre><code>PlayerCoroutine:Resume()\n</code></pre> Continues the loop.</p>"},{"location":"APIs/coroutine/#stop","title":"Stop","text":"<p><pre><code>PlayerCoroutine:Stop()\n</code></pre> Stops the loop from running, can be resumed.</p>"},{"location":"APIs/coroutine/#disconnect","title":"Disconnect","text":"<p><pre><code>PlayerCoroutine:Disconnect()\n</code></pre> Disconnects the loop completely, and is not usable after.</p>"},{"location":"APIs/morph/","title":"Easy Morph","text":""},{"location":"APIs/morph/#get-started-with-morphs","title":"Get started with Morphs","text":"<p>EasyMorph lets you morph any player into anything with a simple function, the path argument has to be a model, in-order to work. </p> <p>Create a server script, and add this line to the code:</p> <pre><code>local EasyMorph = HyLib.EasyMorph\nlocal MorphHandler = EasyMorph.New()\n</code></pre> <p>Danger</p> <p>EasyMorph is currently only supported in R6</p>"},{"location":"APIs/morph/#methods","title":"Methods","text":""},{"location":"APIs/morph/#morph","title":"Morph","text":"<p><pre><code>MorphHandler:Morph(player, path)\n</code></pre> Morphs the targetted player into the selected morph.</p> <p>Warning</p> <p>path needs to be a model.</p>"},{"location":"APIs/morph/#unmorph","title":"unMorph","text":"<p><pre><code>MorphHandler:unMorph(player)\n</code></pre> Removes the morph from the selected player.</p>"},{"location":"Source/coroutine/","title":"Easy Coroutine Source","text":""},{"location":"Source/coroutine/#easycoroutine-source-code","title":"EasyCoroutine Source Code","text":"Source Code<pre><code>local module = {}\nmodule.__index = module\n\nfunction module.New()\n    local self = setmetatable({}, module)\n    self.isRunning = false\n    self.isPaused = false\n    return self\nend\n\nfunction module:Run(call)\n    self.Thread = coroutine.create(function()\n        self.isRunning = true\n        while self.isRunning do\n            if not self.isPaused then\n                task.wait() -- Wait until the next frame (task)\n                call()\n            else\n                coroutine.yield() -- Pause the coroutine\n            end\n        end\n    end)\n    coroutine.resume(self.Thread) -- Start the coroutine\nend\n\nfunction module:Disconnect()\n    if self.isRunning then\n        self.isRunning = false\n        coroutine.resume(self.Thread) -- Resume the coroutine to let it terminate\n        self.Thread = nil -- Clean up the reference to the coroutine\n    end\nend\n\nfunction module:Pause()\n    self.isPaused = true\nend\n\nfunction module:Resume()\n    self.isPaused = false\n    coroutine.resume(self.Thread) -- Resume the coroutine\nend\n\nreturn module\n</code></pre> <p>Warning</p> <p>Do not copy this code to the modules. This page is rarely updated, and will most likely be outdated</p>"},{"location":"sub/install/","title":"Installing HyLib","text":""},{"location":"sub/install/#usage","title":"Usage","text":"<p>To get started with HyLib, you will need to download the API</p> <p>Important</p> <p>Download the API here </p> <p>Insert the API into ReplicatedStorage, and require it like this</p> <pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal HyLib = require(ReplicatedStorage.HyLib)\n</code></pre> <p>Info</p> <p>HyLib will automatically update when a new update is released. You will only have to install it once. I do recommend downloading it from the GitHub. Hylib can be used locally, but only certain modules.</p>"},{"location":"sub/install/#updating","title":"Updating","text":"<p>To update HyLib automatically, enable this setting: <pre><code>HyLib.AutoUpdate = true -- Default: false\n</code></pre></p> <p>HyLib is updated at least once every week, and you will be notified on the GitHub when a new release is available. If you encounter any problems with installing HyLib, do not hesitate to create a ticket or open a issue</p> <p>Warning</p> <p>It is not recommended to edit the source code on your own, unless you have mediocre programming experience. We will not help if you encounter problems with edited source code.</p>"}]}